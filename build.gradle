buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'com.diluv.schoomp', name: 'Schoomp', version: '1.2.6'
    }
}

//import com.diluv.schoomp.Webhook
//import com.diluv.schoomp.message.Message

plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm"
    id 'idea'
    id 'moreiotas.publish'
}

String getArtifactID(String platform) {
    return "$modID-$platform-$minecraftVersion"
}

void setupJar(Object project) {
    project.jar {
        manifest {
            attributes([
                    'Specification-Title'     : modID,
                    'Specification-Vendor'    : "talia",
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : "talia",
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraftVersion
            ])
        }
    }

    project.publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.archivesBaseName
                version project.version
                from project.components.java
            }
        }

        repositories {
            maven {
                url = 'https://maven.hexxy.media'
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv('MAVEN_PASSWORD')
                }
                authentication {
                    create("basic", BasicAuthentication)
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'

    repositories {
        maven { url "https://libraries.minecraft.net/" }

        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            name = 'BlameJared Maven'
            url = 'https://maven.blamejared.com'
        }

        maven {
            name = "Modrinth"
            url = "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }

        maven {
            url = "https://jitpack.io"
        }

        maven {
            url = "https://maven.shedaniel.me/"
        }
    }

    dependencies {
        implementation group: "org.jblas", name: "jblas", version: "1.2.5"
    }


    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = 17
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    sourceSets.main.kotlin.srcDirs += 'src/main/java'

    java.toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = null // TODO: Not sure why this works or whether it will work on anyone else's computer
    }
    java.withSourcesJar()
    java.withJavadocJar()

    processResources {
        exclude '.cache'
    }
    processTestResources {
        exclude '.cache'
    }
    sourcesJar {
        duplicatesStrategy 'exclude'
    }
}

allprojects {
    group = "ram.talia.$modID" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
    version = "$modVersion"
    // archivesBaseName set in each gradle

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "1000"
        }
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}

tasks.register("runAllDatagen") {
    dependsOn ":Forge:runXplatDatagen"
    dependsOn ":Forge:runForgeDatagen"
    dependsOn ":Fabric:runDatagen"
}

publishMods {
    displayName = "v$modVersion"

    github {
        repository = System.getenv("GITHUB_REPOSITORY") ?: ""
        commitish = System.getenv("GITHUB_SHA") ?: ""
        tagName = modVersion
        allowEmptyFiles = true
    }
}
